# -*- coding: utf-8 -*-
"""
/***************************************************************************
 QMapPermalink
                                 A QGIS plugin
 Navigate QGIS map views through external permalink system
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-10-05
        git sha              : $Format:%H$
        copyright            : (C) 2025 by yamamoto-ryuzo
        email                : 
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt, QUrl
from qgis.PyQt.QtGui import QIcon, QDesktopServices
from qgis.PyQt.QtWidgets import QAction, QMessageBox
from qgis.core import QgsProject, QgsCoordinateReferenceSystem, QgsCoordinateTransform, QgsPointXY, QgsRectangle
from qgis.gui import QgsMapCanvas

import os.path
import sys
import json
import urllib.parse
import subprocess

from .qmap_permalink_dialog import QMapPermalinkDialog


class QMapPermalink:
    """QGISの地図ビューをパーマリンクで管理・ナビゲートするプラグイン"""

    def __init__(self, iface):
        """コンストラクタ

        Args:
            iface: QGISのインターフェースオブジェクト
        """
        self.iface = iface
        self.plugin_dir = os.path.dirname(__file__)
        
        # 翻訳の初期化
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'QMapPermalink_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # プラグインの宣言
        self.actions = []
        self.menu = self.tr(u'&QMap Permalink')

        # ダイアログ
        self.dlg = None

        # ツールバーの確認（初回実行時にツールバーが存在するかチェック）
        self.first_start = None

    def tr(self, message):
        """翻訳を取得
        
        Args:
            message: 翻訳対象のメッセージ
            
        Returns:
            翻訳されたメッセージ
        """
        return QCoreApplication.translate('QMapPermalink', message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """ツールバーアイコンやメニューアイテムを追加

        Args:
            icon_path: アイコンファイルのパス
            text: アクションのテキスト
            callback: アクションが実行された時のコールバック関数
            enabled_flag: アクションが有効かどうか
            add_to_menu: メニューに追加するかどうか
            add_to_toolbar: ツールバーに追加するかどうか
            status_tip: ステータスバーに表示するヒント
            whats_this: What's Thisヘルプ
            parent: 親ウィジェット

        Returns:
            作成されたQActionオブジェクト
        """
        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # このプラグイン専用のツールバーに追加
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """プラグインのGUI要素を作成（プラグイン読み込み時に呼ばれる）"""
        icon_path = os.path.join(self.plugin_dir, 'icon.png')
        self.add_action(
            icon_path,
            text=self.tr(u'QMap Permalink'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # 初回起動フラグ
        self.first_start = True

    def unload(self):
        """プラグインのアンロード時の処理"""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&QMap Permalink'),
                action)
            self.iface.removeToolBarIcon(action)

    def generate_permalink(self):
        """現在の地図ビューからパーマリンクを生成
        
        Returns:
            パーマリンクURL文字列
        """
        # 現在のマップキャンバス情報を取得
        canvas = self.iface.mapCanvas()
        extent = canvas.extent()
        crs = canvas.mapSettings().destinationCrs()
        scale = canvas.scale()
        
        # パーマリンク情報を辞書形式で作成
        permalink_data = {
            'x_min': extent.xMinimum(),
            'y_min': extent.yMinimum(),
            'x_max': extent.xMaximum(),
            'y_max': extent.yMaximum(),
            'crs': crs.authid(),
            'scale': scale
        }
        
        # JSONエンコードしてURLエンコード
        json_data = json.dumps(permalink_data)
        encoded_data = urllib.parse.quote(json_data)
        
        # カスタムプロトコルでパーマリンクURLを作成
        permalink_url = f"qgis-permalink://{encoded_data}"
        
        return permalink_url

    def navigate_to_permalink(self, permalink_url):
        """パーマリンクURLから地図ビューに移動
        
        Args:
            permalink_url: パーマリンクURL
        """
        try:
            # URLからデータ部分を抽出
            if permalink_url.startswith('qgis-permalink://'):
                encoded_data = permalink_url[17:]  # "qgis-permalink://"を除去
                json_data = urllib.parse.unquote(encoded_data)
                permalink_data = json.loads(json_data)
                
                # 座標系とextentを復元
                crs = QgsCoordinateReferenceSystem(permalink_data['crs'])
                extent = QgsRectangle(
                    permalink_data['x_min'],
                    permalink_data['y_min'],
                    permalink_data['x_max'],
                    permalink_data['y_max']
                )
                
                # マップキャンバスに適用
                canvas = self.iface.mapCanvas()
                canvas.setDestinationCrs(crs)
                canvas.setExtent(extent)
                canvas.refresh()
                
                self.iface.messageBar().pushMessage(
                    "QMap Permalink", 
                    "パーマリンクから地図ビューに移動しました。", 
                    duration=3
                )
                
            else:
                raise ValueError("無効なパーマリンクURLです。")
                
        except Exception as e:
            QMessageBox.warning(
                self.iface.mainWindow(),
                "QMap Permalink エラー",
                f"パーマリンクの処理中にエラーが発生しました：\n{str(e)}"
            )

    def run(self):
        """プラグインのメイン実行処理"""
        # ダイアログが存在しない場合は作成
        if self.dlg is None:
            self.dlg = QMapPermalinkDialog()
            
        # ダイアログのボタンにイベントを接続
        self.dlg.pushButton_generate.clicked.connect(self.on_generate_clicked)
        self.dlg.pushButton_navigate.clicked.connect(self.on_navigate_clicked)
        self.dlg.pushButton_copy.clicked.connect(self.on_copy_clicked)

        # ダイアログを表示
        self.dlg.show()
        result = self.dlg.exec_()

    def on_generate_clicked(self):
        """パーマリンク生成ボタンがクリックされた時の処理"""
        try:
            permalink = self.generate_permalink()
            self.dlg.lineEdit_permalink.setText(permalink)
            self.iface.messageBar().pushMessage(
                "QMap Permalink", 
                "パーマリンクを生成しました。", 
                duration=3
            )
        except Exception as e:
            QMessageBox.warning(
                self.iface.mainWindow(),
                "QMap Permalink エラー",
                f"パーマリンク生成中にエラーが発生しました：\n{str(e)}"
            )

    def on_navigate_clicked(self):
        """ナビゲートボタンがクリックされた時の処理"""
        permalink_url = self.dlg.lineEdit_permalink.text().strip()
        if not permalink_url:
            QMessageBox.warning(
                self.iface.mainWindow(),
                "QMap Permalink",
                "パーマリンクURLを入力してください。"
            )
            return
            
        self.navigate_to_permalink(permalink_url)

    def on_copy_clicked(self):
        """コピーボタンがクリックされた時の処理"""
        permalink_url = self.dlg.lineEdit_permalink.text().strip()
        if not permalink_url:
            QMessageBox.warning(
                self.iface.mainWindow(),
                "QMap Permalink",
                "コピーするパーマリンクがありません。"
            )
            return
            
        clipboard = QCoreApplication.instance().clipboard()
        clipboard.setText(permalink_url)
        self.iface.messageBar().pushMessage(
            "QMap Permalink", 
            "パーマリンクをクリップボードにコピーしました。", 
            duration=3
        )