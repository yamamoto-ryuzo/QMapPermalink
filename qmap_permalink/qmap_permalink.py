# -*- coding: utf-8 -*-
"""
/***************************************************************************
 QMapPermalink
                                 A QGIS plugin
 Navigate QGIS map views through external permalink system
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-10-05
        git sha              : $Format:%H$
        copyright            : (C) 2025 by yamamoto-ryuzo
        email                : 
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt, QUrl, QThread, pyqtSignal, QObject
from qgis.PyQt.QtGui import QIcon, QDesktopServices
from qgis.PyQt.QtWidgets import QAction, QMessageBox
from qgis.core import QgsProject, QgsCoordinateReferenceSystem, QgsCoordinateTransform, QgsPointXY, QgsRectangle
from qgis.gui import QgsMapCanvas

import os.path
import json
import urllib.parse
import threading
import socket

from .qmap_permalink_dialog import QMapPermalinkDialog


class NavigationSignals(QObject):
    """QGIS APIへの安全なアクセスのためのシグナル"""
    navigate_requested = pyqtSignal(dict)  # 地図ナビゲーション要求


class QMapPermalink:
    """QGISの地図ビューをパーマリンクで管理・ナビゲートするプラグイン"""

    def __init__(self, iface):
        """コンストラクタ

        Args:
            iface: QGISのインターフェースオブジェクト
        """
        self.iface = iface
        self.plugin_dir = os.path.dirname(__file__)
        
        # 翻訳の初期化
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'QMapPermalink_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # プラグインの宣言
        self.actions = []
        self.menu = self.tr(u'&QMap Permalink')

        # ダイアログ
        self.dlg = None

        # HTTPサーバー関連
        self.http_server = None
        self.server_thread = None
        self.server_port = 8089  # デフォルトポート
        self._http_running = False
        self._last_request_text = ""
        
        # ナビゲーション用シグナル
        self.navigation_signals = NavigationSignals()
        self.navigation_signals.navigate_requested.connect(self.handle_navigation_request)

        # ツールバーの確認（初回実行時にツールバーが存在するかチェック）
        self.first_start = None

    def tr(self, message):
        """翻訳を取得
        
        Args:
            message: 翻訳対象のメッセージ
            
        Returns:
            翻訳されたメッセージ
        """
        return QCoreApplication.translate('QMapPermalink', message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """ツールバーアイコンやメニューアイテムを追加

        Args:
            icon_path: アイコンファイルのパス
            text: アクションのテキスト
            callback: アクションが実行された時のコールバック関数
            enabled_flag: アクションが有効かどうか
            add_to_menu: メニューに追加するかどうか
            add_to_toolbar: ツールバーに追加するかどうか
            status_tip: ステータスバーに表示するヒント
            whats_this: What's Thisヘルプ
            parent: 親ウィジェット

        Returns:
            作成されたQActionオブジェクト
        """
        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # このプラグイン専用のツールバーに追加
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """プラグインのGUI要素を作成（プラグイン読み込み時に呼ばれる）"""
        icon_path = os.path.join(self.plugin_dir, 'icon.png')
        self.add_action(
            icon_path,
            text=self.tr(u'QMap Permalink'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # HTTPサーバーを起動
        self.start_http_server()

        # 初回起動フラグ
        self.first_start = True

    def unload(self):
        """プラグインのアンロード時の処理"""
        # HTTPサーバーを停止
        self.stop_http_server()
        
        # シグナルを切断
        if hasattr(self, 'navigation_signals'):
            self.navigation_signals.navigate_requested.disconnect()
        
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&QMap Permalink'),
                action)
            self.iface.removeToolBarIcon(action)

    def start_http_server(self):
        """HTTPサーバーを起動"""
        try:
            if self._http_running:
                return

            # 使用可能なポートを探す
            self.server_port = self.find_available_port(8089, 8099)

            server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
            server_socket.bind(('localhost', self.server_port))
            server_socket.listen(5)
            server_socket.settimeout(1.0)

            self.http_server = server_socket
            self._http_running = True

            self.server_thread = threading.Thread(
                target=self.run_server,
                name="QMapPermalinkHTTP",
                daemon=True,
            )
            self.server_thread.start()

            print(f"QMap Permalink HTTPサーバーが起動しました: http://localhost:{self.server_port}")
            self.iface.messageBar().pushMessage(
                "QMap Permalink",
                f"HTTPサーバーが起動しました (ポート: {self.server_port})",
                duration=3
            )

        except Exception as e:
            print(f"HTTPサーバーの起動に失敗しました: {e}")
            self.iface.messageBar().pushMessage(
                "QMap Permalink エラー",
                f"HTTPサーバーの起動に失敗しました: {str(e)}",
                duration=5
            )
            self._http_running = False
            if self.http_server:
                try:
                    self.http_server.close()
                except Exception:
                    pass
                self.http_server = None
    
    def run_server(self):
        """サーバーを安全に実行"""
        try:
            while self._http_running and self.http_server:
                try:
                    conn, addr = self.http_server.accept()
                except socket.timeout:
                    continue
                except OSError:
                    break

                try:
                    self._handle_client_connection(conn, addr)
                except Exception as e:
                    print(f"HTTPリクエスト処理中にエラーが発生しました: {e}")

        finally:
            self._http_running = False
            if self.http_server:
                try:
                    self.http_server.close()
                except Exception:
                    pass
                self.http_server = None
            print("HTTPサーバーが停止しました")
    
    def stop_http_server(self):
        """HTTPサーバーを停止"""
        try:
            self._http_running = False

            if self.http_server:
                try:
                    self.http_server.close()
                except Exception:
                    pass
                self.http_server = None

            # スレッドの終了を待つ
            if self.server_thread and self.server_thread.is_alive():
                try:
                    self.server_thread.join(timeout=3.0)
                except Exception:
                    pass
                self.server_thread = None

            print("QMap Permalink HTTPサーバーが停止しました")
            
        except Exception as e:
            print(f"HTTPサーバーの停止中にエラーが発生しました: {e}")

    def _handle_client_connection(self, conn, addr):
        """HTTPリクエストを解析して必要であればナビゲーションを実行"""
        with conn:
            request_bytes = self._read_http_request(conn)
            if not request_bytes:
                return

            request_text = request_bytes.decode('iso-8859-1', errors='replace')
            self._last_request_text = request_text

            print("QMap Permalink HTTP request from", addr)
            print(request_text)

            try:
                request_line = request_text.splitlines()[0]
            except IndexError:
                self._send_http_response(conn, 400, "Bad Request", "Invalid HTTP request line.")
                return

            parts = request_line.split()
            if len(parts) < 3:
                self._send_http_response(conn, 400, "Bad Request", "Malformed HTTP request line.")
                return

            method, target, _ = parts

            if method.upper() != 'GET':
                self._send_http_response(conn, 405, "Method Not Allowed", "Only GET is supported.")
                return

            parsed_url = urllib.parse.urlparse(target)

            if parsed_url.path != '/qgis-map':
                self._send_http_response(conn, 404, "Not Found", "Endpoint not found.")
                return

            params = urllib.parse.parse_qs(parsed_url.query)

            try:
                navigation_data = self._build_navigation_data_from_params(params)
            except ValueError as e:
                self._send_http_response(conn, 400, "Bad Request", str(e))
                return

            # メインスレッドでナビゲーションを実行
            self.navigation_signals.navigate_requested.emit(navigation_data)

            body = (
                "<!DOCTYPE html>"
                "<html lang=\"ja\">"
                "<head><meta charset=\"utf-8\"><title>QMap Permalink</title></head>"
                "<body><p>地図の移動を受け付けました。</p></body>"
                "</html>"
            )
            self._send_http_response(conn, 200, "OK", body, "text/html; charset=utf-8")
        
    def _build_navigation_data_from_params(self, params):
        """HTTPクエリパラメータからナビゲーション用データを生成"""
        if 'location' in params:
            return {
                'type': 'location',
                'location': params['location'][0],
            }

        if all(key in params for key in ('x', 'y', 'zoom')):
            try:
                return {
                    'type': 'coordinates',
                    'x': float(params['x'][0]),
                    'y': float(params['y'][0]),
                    'zoom': float(params['zoom'][0]),
                    'crs': params.get('crs', ['EPSG:4326'])[0],
                }
            except (TypeError, ValueError):
                raise ValueError("Invalid coordinate parameters.")

        raise ValueError("Missing required parameters.")

    def _read_http_request(self, conn):
        """HTTPリクエスト全体を読み取る"""
        data = b""
        conn.settimeout(2.0)

        while True:
            try:
                chunk = conn.recv(1024)
            except socket.timeout:
                break

            if not chunk:
                break

            data += chunk

            if b"\r\n\r\n" in data:
                break

        return data

    def _send_http_response(self, conn, status_code, reason, body, content_type="text/plain; charset=utf-8"):
        """最小限のHTTPレスポンスを送信"""
        if isinstance(body, str):
            body_bytes = body.encode('utf-8')
        else:
            body_bytes = body

        header_lines = [
            f"HTTP/1.1 {status_code} {reason}",
            f"Content-Length: {len(body_bytes)}",
            f"Content-Type: {content_type}",
            "Connection: close",
            "",
            "",
        ]

        header_bytes = "\r\n".join(header_lines).encode('utf-8')

        try:
            conn.sendall(header_bytes + body_bytes)
        except OSError:
            pass
    
    def find_available_port(self, start_port, end_port):
        """使用可能なポートを探す
        
        Args:
            start_port: 開始ポート番号
            end_port: 終了ポート番号
            
        Returns:
            使用可能なポート番号
        """
        for port in range(start_port, end_port + 1):
            try:
                with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                    s.bind(('localhost', port))
                    return port
            except OSError:
                continue
        raise RuntimeError(f"ポート範囲 {start_port}-{end_port} で使用可能なポートが見つかりません")
    
    def generate_permalink(self):
        """現在の地図ビューからパーマリンクを生成
        
        Returns:
            パーマリンクURL文字列（HTTP形式）
        """
        # 現在のマップキャンバス情報を取得
        canvas = self.iface.mapCanvas()
        extent = canvas.extent()
        crs = canvas.mapSettings().destinationCrs()
        scale = canvas.scale()
        
        # パーマリンク情報を辞書形式で作成
        permalink_data = {
            'x_min': extent.xMinimum(),
            'y_min': extent.yMinimum(),
            'x_max': extent.xMaximum(),
            'y_max': extent.yMaximum(),
            'crs': crs.authid(),
            'scale': scale
        }
        
        # JSONエンコードしてURLエンコード
        json_data = json.dumps(permalink_data)
        encoded_data = urllib.parse.quote(json_data)
        
        # HTTPサーバー形式でパーマリンクURLを作成
        permalink_url = f"http://localhost:{self.server_port}/qgis-map?location={encoded_data}"
        
        return permalink_url

    def navigate_to_permalink(self, permalink_url):
        """パーマリンクURLから地図ビューに移動
        
        Args:
            permalink_url: パーマリンクURL
        """
        try:
            # HTTP形式のURLを処理
            if permalink_url.startswith('http://localhost:') and '/qgis-map' in permalink_url:
                # HTTP URLから直接実行（ブラウザを経由しない）
                parsed_url = urllib.parse.urlparse(permalink_url)
                params = urllib.parse.parse_qs(parsed_url.query)
                
                if 'location' in params:
                    location_data = params['location'][0]
                    self.navigate_from_http(location_data)
                else:
                    raise ValueError("HTTP URLにlocationパラメータがありません。")
                    
            # 従来のカスタムプロトコル形式も維持
            elif permalink_url.startswith('qgis-permalink://'):
                encoded_data = permalink_url[17:]  # "qgis-permalink://"を除去
                json_data = urllib.parse.unquote(encoded_data)
                permalink_data = json.loads(json_data)
                
                # 座標系とextentを復元
                crs = QgsCoordinateReferenceSystem(permalink_data['crs'])
                extent = QgsRectangle(
                    permalink_data['x_min'],
                    permalink_data['y_min'],
                    permalink_data['x_max'],
                    permalink_data['y_max']
                )
                
                # マップキャンバスに適用
                canvas = self.iface.mapCanvas()
                canvas.setDestinationCrs(crs)
                canvas.setExtent(extent)
                canvas.refresh()
                
                self.iface.messageBar().pushMessage(
                    "QMap Permalink", 
                    "パーマリンクから地図ビューに移動しました。", 
                    duration=3
                )
                
            else:
                raise ValueError("サポートされていないパーマリンクURL形式です。")
                
        except Exception as e:
            QMessageBox.warning(
                self.iface.mainWindow(),
                "QMap Permalink エラー",
                f"パーマリンクの処理中にエラーが発生しました：\n{str(e)}"
            )
    
    def navigate_from_http(self, location_data):
        """HTTP経由でのナビゲーション処理
        
        Args:
            location_data: エンコードされた位置データ
        """
        try:
            # URLデコードしてJSONパース
            json_data = urllib.parse.unquote(location_data)
            permalink_data = json.loads(json_data)
            
            # 座標系とextentを復元
            crs = QgsCoordinateReferenceSystem(permalink_data['crs'])
            extent = QgsRectangle(
                permalink_data['x_min'],
                permalink_data['y_min'],
                permalink_data['x_max'],
                permalink_data['y_max']
            )
            
            # マップキャンバスに適用
            canvas = self.iface.mapCanvas()
            canvas.setDestinationCrs(crs)
            canvas.setExtent(extent)
            canvas.refresh()
            
            self.iface.messageBar().pushMessage(
                "QMap Permalink", 
                "HTTP経由で地図ビューに移動しました。", 
                duration=3
            )
            
        except Exception as e:
            raise Exception(f"HTTP地図移動の処理中にエラーが発生しました: {str(e)}")
    
    def navigate_to_coordinates(self, x, y, zoom, crs_auth_id):
        """座標指定でのナビゲーション処理
        
        Args:
            x: 経度またはX座標
            y: 緯度またはY座標  
            zoom: ズームレベル
            crs_auth_id: 座標系ID (例: "EPSG:4326")
        """
        try:
            # 座標系を設定
            crs = QgsCoordinateReferenceSystem(crs_auth_id)
            
            # ズームレベルからおおよその範囲を計算
            # ズームレベルが高いほど小さな範囲
            scale_factor = 1000 / (2 ** (zoom - 10))  # おおよその計算
            half_width = scale_factor / 2
            half_height = scale_factor / 2
            
            # 範囲を作成
            extent = QgsRectangle(
                x - half_width,
                y - half_height, 
                x + half_width,
                y + half_height
            )
            
            # マップキャンバスに適用
            canvas = self.iface.mapCanvas()
            canvas.setDestinationCrs(crs)
            canvas.setExtent(extent)
            canvas.refresh()
            
            self.iface.messageBar().pushMessage(
                "QMap Permalink", 
                f"座標 ({x:.6f}, {y:.6f}) に移動しました。", 
                duration=3
            )
            
        except Exception as e:
            raise Exception(f"座標移動の処理中にエラーが発生しました: {str(e)}")

    def run(self):
        """プラグインのメイン実行処理"""
        # ダイアログが存在しない場合は作成
        if self.dlg is None:
            self.dlg = QMapPermalinkDialog()
            
        # ダイアログのボタンにイベントを接続
        self.dlg.pushButton_generate.clicked.connect(self.on_generate_clicked)
        self.dlg.pushButton_navigate.clicked.connect(self.on_navigate_clicked)
        self.dlg.pushButton_copy.clicked.connect(self.on_copy_clicked)

        # HTTPサーバーの状態を更新
        server_running = self.http_server is not None
        self.dlg.update_server_status(self.server_port, server_running)

        # ダイアログを表示
        self.dlg.show()
        result = self.dlg.exec_()

    def on_generate_clicked(self):
        """パーマリンク生成ボタンがクリックされた時の処理"""
        try:
            permalink = self.generate_permalink()
            self.dlg.lineEdit_permalink.setText(permalink)
            self.iface.messageBar().pushMessage(
                "QMap Permalink", 
                "パーマリンクを生成しました。", 
                duration=3
            )
        except Exception as e:
            QMessageBox.warning(
                self.iface.mainWindow(),
                "QMap Permalink エラー",
                f"パーマリンク生成中にエラーが発生しました：\n{str(e)}"
            )

    def handle_navigation_request(self, navigation_data):
        """HTTPリクエストからのナビゲーション要求を安全に処理（メインスレッドで実行）
        
        Args:
            navigation_data: ナビゲーション情報を含む辞書
        """
        try:
            if navigation_data['type'] == 'location':
                # JSON形式のlocationデータを処理
                location_data = navigation_data['location']
                self.navigate_from_http(location_data)
            elif navigation_data['type'] == 'coordinates':
                # 個別座標パラメータを処理
                x = navigation_data['x']
                y = navigation_data['y']
                zoom = navigation_data['zoom']
                crs = navigation_data['crs']
                self.navigate_to_coordinates(x, y, zoom, crs)
                
            print(f"ナビゲーション完了: {navigation_data['type']}")
            
        except Exception as e:
            print(f"ナビゲーション処理エラー: {e}")
            self.iface.messageBar().pushMessage(
                "QMap Permalink エラー", 
                f"ナビゲーション処理中にエラーが発生しました: {str(e)}", 
                duration=5
            )
    
    def on_navigate_clicked(self):
        """ナビゲートボタンがクリックされた時の処理"""
        permalink_url = self.dlg.lineEdit_permalink.text().strip()
        if not permalink_url:
            QMessageBox.warning(
                self.iface.mainWindow(),
                "QMap Permalink",
                "パーマリンクURLを入力してください。"
            )
            return
            
        self.navigate_to_permalink(permalink_url)

    def on_copy_clicked(self):
        """コピーボタンがクリックされた時の処理"""
        permalink_url = self.dlg.lineEdit_permalink.text().strip()
        if not permalink_url:
            QMessageBox.warning(
                self.iface.mainWindow(),
                "QMap Permalink",
                "コピーするパーマリンクがありません。"
            )
            return
            
        clipboard = QCoreApplication.instance().clipboard()
        clipboard.setText(permalink_url)
        self.iface.messageBar().pushMessage(
            "QMap Permalink", 
            "パーマリンクをクリップボードにコピーしました。", 
            duration=3
        )