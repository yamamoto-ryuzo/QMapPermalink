# -*- coding: utf-8 -*-
"""
/***************************************************************************
 QMapPermalink
                                 A QGIS plugin
 Navigate QGIS map views through external permalink system
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-10-05
        git sha              : $Format:%H$
        copyright            : (C) 2025 by yamamoto-ryuzo
        email                : 
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt, QUrl, QThread, pyqtSignal, QObject
from qgis.PyQt.QtGui import QIcon, QDesktopServices, QClipboard
from qgis.PyQt.QtWidgets import QAction, QMessageBox, QApplication
from qgis.core import QgsProject, QgsCoordinateReferenceSystem, QgsCoordinateTransform, QgsPointXY, QgsRectangle
from qgis.gui import QgsMapCanvas

import os.path
import json
import urllib.parse
import threading
import socket
import math
import html

from .qmap_permalink_dialog import QMapPermalinkDialog


class NavigationSignals(QObject):
    """QGIS APIへの安全なアクセスのためのシグナル"""
    navigate_requested = pyqtSignal(dict)  # 地図ナビゲーション要求


class QMapPermalink:
    """QGISの地図ビューをパーマリンクで管理・ナビゲートするプラグイン"""

    def __init__(self, iface):
        """コンストラクタ

        Args:
            iface: QGISのインターフェースオブジェクト
        """
        self.iface = iface
        self.plugin_dir = os.path.dirname(__file__)
        
        # 翻訳の初期化
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'QMapPermalink_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # プラグインの宣言
        self.actions = []
        self.menu = self.tr(u'&QMap Permalink')

        # ダイアログ
        self.dlg = None

        # HTTPサーバー関連
        self.http_server = None
        self.server_thread = None
        self.server_port = 8089  # デフォルトポート
        self._http_running = False
        self._last_request_text = ""
        
        # ナビゲーション用シグナル
        self.navigation_signals = NavigationSignals()
        self.navigation_signals.navigate_requested.connect(self.handle_navigation_request)

        # ツールバーの確認（初回実行時にツールバーが存在するかチェック）
        self.first_start = None

    def tr(self, message):
        """翻訳を取得
        
        Args:
            message: 翻訳対象のメッセージ
            
        Returns:
            翻訳されたメッセージ
        """
        return QCoreApplication.translate('QMapPermalink', message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """ツールバーアイコンやメニューアイテムを追加

        Args:
            icon_path: アイコンファイルのパス
            text: アクションのテキスト
            callback: アクションが実行された時のコールバック関数
            enabled_flag: アクションが有効かどうか
            add_to_menu: メニューに追加するかどうか
            add_to_toolbar: ツールバーに追加するかどうか
            status_tip: ステータスバーに表示するヒント
            whats_this: What's Thisヘルプ
            parent: 親ウィジェット

        Returns:
            作成されたQActionオブジェクト
        """
        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # このプラグイン専用のツールバーに追加
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """プラグインのGUI要素を作成（プラグイン読み込み時に呼ばれる）"""
        icon_path = os.path.join(self.plugin_dir, 'icon.png')
        self.add_action(
            icon_path,
            text=self.tr(u'QMap Permalink'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # HTTPサーバーを起動
        self.start_http_server()

        # 初回起動フラグ
        self.first_start = True

    def unload(self):
        """プラグインのアンロード時の処理"""
        # HTTPサーバーを停止
        self.stop_http_server()
        
        # シグナルを切断
        if hasattr(self, 'navigation_signals'):
            self.navigation_signals.navigate_requested.disconnect()
        
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&QMap Permalink'),
                action)
            self.iface.removeToolBarIcon(action)

    def start_http_server(self):
        """HTTPサーバーを起動"""
        try:
            if self._http_running:
                return

            # 使用可能なポートを探す
            self.server_port = self.find_available_port(8089, 8099)

            server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
            server_socket.bind(('localhost', self.server_port))
            server_socket.listen(5)
            server_socket.settimeout(1.0)

            self.http_server = server_socket
            self._http_running = True

            self.server_thread = threading.Thread(
                target=self.run_server,
                name="QMapPermalinkHTTP",
                daemon=True,
            )
            self.server_thread.start()

            print(f"QMap Permalink HTTPサーバーが起動しました: http://localhost:{self.server_port}")
            self.iface.messageBar().pushMessage(
                "QMap Permalink",
                f"HTTPサーバーが起動しました (ポート: {self.server_port})",
                duration=3
            )

        except Exception as e:
            print(f"HTTPサーバーの起動に失敗しました: {e}")
            self.iface.messageBar().pushMessage(
                "QMap Permalink エラー",
                f"HTTPサーバーの起動に失敗しました: {str(e)}",
                duration=5
            )
            self._http_running = False
            if self.http_server:
                try:
                    self.http_server.close()
                except Exception:
                    pass
                self.http_server = None
    
    def run_server(self):
        """サーバーを安全に実行"""
        try:
            while self._http_running and self.http_server:
                try:
                    conn, addr = self.http_server.accept()
                except socket.timeout:
                    continue
                except OSError:
                    break

                try:
                    self._handle_client_connection(conn, addr)
                except Exception as e:
                    print(f"HTTPリクエスト処理中にエラーが発生しました: {e}")

        finally:
            self._http_running = False
            if self.http_server:
                try:
                    self.http_server.close()
                except Exception:
                    pass
                self.http_server = None
            print("HTTPサーバーが停止しました")
    
    def stop_http_server(self):
        """HTTPサーバーを停止"""
        try:
            self._http_running = False

            if self.http_server:
                try:
                    self.http_server.close()
                except Exception:
                    pass
                self.http_server = None

            # スレッドの終了を待つ
            if self.server_thread and self.server_thread.is_alive():
                try:
                    self.server_thread.join(timeout=3.0)
                except Exception:
                    pass
                self.server_thread = None

            print("QMap Permalink HTTPサーバーが停止しました")
            
        except Exception as e:
            print(f"HTTPサーバーの停止中にエラーが発生しました: {e}")

    def _handle_client_connection(self, conn, addr):
        """HTTPリクエストを解析して必要であればナビゲーションを実行"""
        with conn:
            request_bytes = self._read_http_request(conn)
            if not request_bytes:
                return

            request_text = request_bytes.decode('iso-8859-1', errors='replace')
            self._last_request_text = request_text

            print("QMap Permalink HTTP request from", addr)
            print(request_text)

            try:
                request_line = request_text.splitlines()[0]
            except IndexError:
                self._send_http_response(conn, 400, "Bad Request", "Invalid HTTP request line.")
                return

            parts = request_line.split()
            if len(parts) < 3:
                self._send_http_response(conn, 400, "Bad Request", "Malformed HTTP request line.")
                return

            method, target, _ = parts

            if method.upper() != 'GET':
                self._send_http_response(conn, 405, "Method Not Allowed", "Only GET is supported.")
                return

            parsed_url = urllib.parse.urlparse(target)

            if parsed_url.path != '/qgis-map':
                self._send_http_response(conn, 404, "Not Found", "Endpoint not found.")
                return

            params = urllib.parse.parse_qs(parsed_url.query)

            try:
                navigation_data = self._build_navigation_data_from_params(params)
            except ValueError as e:
                self._send_http_response(conn, 400, "Bad Request", str(e))
                return

            # メインスレッドでナビゲーションを実行
            self.navigation_signals.navigate_requested.emit(navigation_data)

            google_url = self._build_google_maps_url(navigation_data)
            if google_url:
                escaped_url = html.escape(google_url)
                body = (
                    "<!DOCTYPE html>"
                    "<html lang=\"ja\">"
                    "<head>"
                    "<meta charset=\"utf-8\">"
                    "<title>QMap Permalink</title>"
                    "</head>"
                    "<body>"
                    "<p>地図の移動を受け付けました。Google Mapsでも同じ地点を開けます:</p>"
                    "<p><a href=\"" + escaped_url + "\" target=\"_blank\" rel=\"noopener noreferrer\">" + escaped_url + "</a></p>"
                    "</body>"
                    "</html>"
                )
                self._send_http_response(conn, 200, "OK", body, "text/html; charset=utf-8")
            else:
                body = (
                    "<!DOCTYPE html>"
                    "<html lang=\"ja\">"
                    "<head><meta charset=\"utf-8\"><title>QMap Permalink</title></head>"
                    "<body><p>地図の移動を受け付けました。</p></body>"
                    "</html>"
                )
                self._send_http_response(conn, 200, "OK", body, "text/html; charset=utf-8")
        
    def _build_navigation_data_from_params(self, params):
        """HTTPクエリパラメータからナビゲーション用データを生成

        scale を受け取り、ナビゲーションデータに含める。
        zoom は明示的に指定されている場合のみ navigation_data に含まれる。
        """
        if 'location' in params:
            raw_location = params['location'][0]
            navigation_data = {
                'type': 'location',
                'location': raw_location,
            }
            try:
                decoded = urllib.parse.unquote(raw_location)
                data = json.loads(decoded)
                lat = data.get('center_wgs84_lat')
                lon = data.get('center_wgs84_lon')
                if lat is not None and lon is not None:
                    navigation_data['lat'] = float(lat)
                    navigation_data['lon'] = float(lon)
                if 'zoom_level' in data:
                    navigation_data['zoom'] = float(data['zoom_level'])
                navigation_data['crs'] = data.get('crs', 'EPSG:4326')
                navigation_data['center_x'] = data.get('center_x')
                navigation_data['center_y'] = data.get('center_y')
                # scale は数値のまま渡す
                navigation_data['scale'] = data.get('scale')
                navigation_data['map_units_per_pixel'] = data.get('map_units_per_pixel')
            except Exception:
                pass
            return navigation_data

        crs = params.get('crs', ['EPSG:4326'])[0]
        zoom_value = self._extract_zoom(params)
        # scale パラメータがあればナビゲーションデータに含める
        scale_value = None
        # rotation パラメータがあれば含める
        rotation_value = None
        if 'scale' in params:
            try:
                scale_value = float(params['scale'][0])
            except Exception:
                raise ValueError("scale パラメータは数値で指定してください")
        if 'rotation' in params:
            try:
                rotation_value = float(params['rotation'][0])
            except Exception:
                raise ValueError("rotation パラメータは数値で指定してください")

        if 'll' in params:
            lat, lon = self._parse_latlon(params['ll'][0])
            return {
                'type': 'coordinates',
                'x': lon,
                'y': lat,
                'zoom': zoom_value,
                'crs': crs,
                'lat': lat,
                'lon': lon,
                'scale': scale_value,
                'rotation': rotation_value,
            }

        if 'q' in params:
            lat, lon = self._parse_latlon(params['q'][0])
            return {
                'type': 'coordinates',
                'x': lon,
                'y': lat,
                'zoom': zoom_value,
                'crs': crs,
                'lat': lat,
                'lon': lon,
                'scale': scale_value,
                'rotation': rotation_value,
            }

        if 'center' in params:
            lat, lon = self._parse_latlon(params['center'][0])
            return {
                'type': 'coordinates',
                'x': lon,
                'y': lat,
                'zoom': zoom_value,
                'crs': crs,
                'lat': lat,
                'lon': lon,
                'scale': scale_value,
            }

    # 新仕様: シンプルな x/y/scale パラメータをサポート（標準は scale）
    # 例（緯度経度）: /qgis-map?x=139&y=35&scale=1000.0&crs=EPSG:4326 (デフォルト crs=EPSG:4326)
    # 例（直角座標、例として EPSG:6677）: /qgis-map?x=667700.0&y=4321987.0&scale=1000.0&crs=EPSG:6677
        if 'x' in params and 'y' in params:
            try:
                x_val = float(params['x'][0])
                y_val = float(params['y'][0])
            except Exception:
                raise ValueError("x/y パラメータは数値で指定してください")
            # 緯度経度として扱う場合（デフォルト CRS が EPSG:4326）には lat/lon を設定
            lat_val = None
            lon_val = None
            if crs.upper().startswith('EPSG:4326'):
                lat_val = float(y_val)
                lon_val = float(x_val)
            return {
                'type': 'coordinates',
                'x': x_val,
                'y': y_val,
                'zoom': zoom_value,
                'crs': crs,
                'lat': lat_val,
                'lon': lon_val,
                'scale': scale_value,
                'rotation': rotation_value,
            }

        if all(key in params for key in ('lat', 'lon')):
            try:
                lat = float(params['lat'][0])
                lon = float(params['lon'][0])
            except (TypeError, ValueError):
                raise ValueError("Invalid lat/lon parameters.")
            return {
                'type': 'coordinates',
                'x': lon,
                'y': lat,
                'zoom': zoom_value,
                'crs': crs,
                'lat': lat,
                'lon': lon,
                'scale': scale_value,
                'rotation': rotation_value,
            }

        if all(key in params for key in ('lat', 'lng')):
            try:
                lat = float(params['lat'][0])
                lon = float(params['lng'][0])
            except (TypeError, ValueError):
                raise ValueError("Invalid lat/lng parameters.")
            return {
                'type': 'coordinates',
                'x': lon,
                'y': lat,
                'zoom': zoom_value,
                'crs': crs,
                'lat': lat,
                'lon': lon,
                'scale': scale_value,
            }

        if all(key in params for key in ('x', 'y')):
            try:
                x_value = float(params['x'][0])
                y_value = float(params['y'][0])
            except (TypeError, ValueError):
                raise ValueError("Invalid coordinate parameters.")
            data = {
                'type': 'coordinates',
                'x': x_value,
                'y': y_value,
                'zoom': zoom_value,
                'crs': crs,
            }
            if crs.upper() == 'EPSG:4326':
                data['lat'] = y_value
                data['lon'] = x_value
            data['scale'] = scale_value
            data['rotation'] = rotation_value
            return data

        raise ValueError("Missing required parameters.")

    def _read_http_request(self, conn):
        """HTTPリクエスト全体を読み取る"""
        data = b""
        conn.settimeout(2.0)

        while True:
            try:
                chunk = conn.recv(1024)
            except socket.timeout:
                break

            if not chunk:
                break

            data += chunk

            if b"\r\n\r\n" in data:
                break

        return data

    def _send_http_response(self, conn, status_code, reason, body, content_type="text/plain; charset=utf-8"):
        """最小限のHTTPレスポンスを送信"""
        if isinstance(body, str):
            body_bytes = body.encode('utf-8')
        else:
            body_bytes = body

        header_lines = [
            f"HTTP/1.1 {status_code} {reason}",
            f"Content-Length: {len(body_bytes)}",
            f"Content-Type: {content_type}",
            "Connection: close",
            "",
            "",
        ]

        header_bytes = "\r\n".join(header_lines).encode('utf-8')

        try:
            conn.sendall(header_bytes + body_bytes)
        except OSError:
            pass

    def _extract_zoom(self, params):
        """クエリパラメータからズームレベルを取得

        明示的なズーム指定がなければ None を返す（Google 用に scale から推定する）
        """
        for key in ('z', 'zoom', 'level'):
            if key in params:
                try:
                    return float(params[key][0])
                except (TypeError, ValueError):
                    raise ValueError(f"Invalid {key} parameter.")
        return None

    def _build_google_maps_url(self, navigation_data):
        """ナビゲーションデータからGoogle Maps用URLを生成

        Google Maps用は zoom が必要。zoom が与えられなければ scale から推定する。
        最終フォールバックは zoom=16 とする。
        """
        try:
            if navigation_data.get('type') == 'coordinates':
                lat, lon = self._resolve_coordinates(navigation_data)
                if lat is None or lon is None:
                    return None
                # zoom が無ければ scale から推定し、無ければデフォルト16を使う
                zoom_value = navigation_data.get('zoom')
                if zoom_value is None:
                    zoom_value = self._estimate_zoom_from_scale(navigation_data.get('scale'))
                if zoom_value is None:
                    zoom_value = 16.0
                zoom_int = max(0, int(round(float(zoom_value))))
                return f"https://www.google.co.jp/maps/@{lat:.6f},{lon:.6f},{zoom_int}z"

            if navigation_data.get('type') == 'location':
                lat = navigation_data.get('lat')
                lon = navigation_data.get('lon')
                zoom_value = navigation_data.get('zoom')

                if lat is None or lon is None:
                    try:
                        decoded = urllib.parse.unquote(navigation_data['location'])
                        data = json.loads(decoded)
                    except Exception:
                        data = {}

                    if data:
                        center_lat = data.get('center_wgs84_lat')
                        center_lon = data.get('center_wgs84_lon')
                        if center_lat is not None and center_lon is not None:
                            lat = float(center_lat)
                            lon = float(center_lon)
                        else:
                            center_x = data.get('center_x')
                            center_y = data.get('center_y')
                            crs_authid = data.get('center_crs') or data.get('crs')
                            if center_x is not None and center_y is not None and crs_authid:
                                lat, lon = self._convert_to_wgs84(center_x, center_y, crs_authid)
                        if zoom_value is None:
                            zoom_value = self._estimate_zoom_from_scale(data.get('scale'))

                if (lat is None or lon is None) and navigation_data.get('center_x') is not None:
                    crs_authid = navigation_data.get('crs')
                    lat, lon = self._convert_to_wgs84(
                        navigation_data.get('center_x'),
                        navigation_data.get('center_y'),
                        crs_authid,
                    )

                if lat is None or lon is None:
                    return None

                if zoom_value is None:
                    zoom_value = 16.0

                zoom_int = max(0, int(round(float(zoom_value))))
                return f"https://www.google.co.jp/maps/@{lat:.6f},{lon:.6f},{zoom_int}z"

        except Exception:
            return None

        return None

    def _resolve_coordinates(self, navigation_data):
        """ナビゲーションデータからWGS84座標を求める"""
        lat = navigation_data.get('lat')
        lon = navigation_data.get('lon')
        if lat is not None and lon is not None:
            return float(lat), float(lon)

        x = navigation_data.get('x')
        y = navigation_data.get('y')
        crs_authid = navigation_data.get('crs')
        if x is None or y is None or crs_authid is None:
            return None, None

        return self._convert_to_wgs84(x, y, crs_authid)

    def _calculate_zoom_level(self, canvas, center_point, crs):
        """現在のキャンバス情報からWeb地図相当のズームレベルを概算"""
        try:
            map_units_per_pixel = canvas.mapUnitsPerPixel()
        except Exception:
            map_units_per_pixel = None

        if not map_units_per_pixel or map_units_per_pixel <= 0:
            return None

        web_mercator = QgsCoordinateReferenceSystem("EPSG:3857")
        try:
            if crs != web_mercator:
                transform = QgsCoordinateTransform(crs, web_mercator, QgsProject.instance())
                merc_center = transform.transform(center_point)
                merc_right = transform.transform(QgsPointXY(center_point.x() + map_units_per_pixel, center_point.y()))
            else:
                merc_center = QgsPointXY(center_point)
                merc_right = QgsPointXY(center_point.x() + map_units_per_pixel, center_point.y())

            resolution = abs(merc_right.x() - merc_center.x())
            if resolution <= 0:
                raise ValueError("invalid resolution")

            zoom = math.log2(156543.03392804097 / resolution)
            return max(0.0, min(21.0, round(zoom)))

        except Exception:
            return None
    
    def _estimate_zoom_from_scale(self, scale):
        """スケール値から概算のズームレベルを推定"""
        # 与えられたズームレベル表に基づき、スケールに最も近いズームを返す
        # 参照表 (Zoom -> Scale) を元にスナップする方式に変更する。
        # 表は以下を想定（ユーザー提供）:
        # 0:1:400,000,000, 1:1:200,000,000, 2:1:100,000,000, 3:1:60,000,000, 4:1:30,000,000,
        # 5:1:15,000,000, 6:1:8,000,000, 7:1:4,000,000, 8:1:2,000,000, 9:1:1,000,000,
        # 10:1:400,000, 11:1:200,000, 12:1:100,000, 13:1:40,000, 14:1:20,000,
        # 15:1:10,000, 16:1:5,000, 17:1:2,500, 18:1:1,250, 19:1:600,
        # 20:1:300, 21:1:150, 22:1:75, 23:1:40
        # 24-30 は更に拡大して 1:1 に近づく（ここでは 23 以降は半分ずつ小さくなると仮定して外挿）
        if not scale:
            return 16.0
        try:
            s = float(scale)
            if s <= 0:
                return 16.0

            # 参照スケール表を作成
            scale_table = {
                0: 400_000_000.0,
                1: 200_000_000.0,
                2: 100_000_000.0,
                3: 60_000_000.0,
                4: 30_000_000.0,
                5: 15_000_000.0,
                6: 8_000_000.0,
                7: 4_000_000.0,
                8: 2_000_000.0,
                9: 1_000_000.0,
                10: 400_000.0,
                11: 200_000.0,
                12: 100_000.0,
                13: 40_000.0,
                14: 20_000.0,
                15: 10_000.0,
                16: 5_000.0,
                17: 2_500.0,
                18: 1_250.0,
                19: 600.0,
                20: 300.0,
                21: 150.0,
                22: 75.0,
                23: 40.0,
            }

            # 外挿: 24-30 は 23 の値を半分ずつ外挿
            for z in range(24, 31):
                scale_table[z] = scale_table[23] / (2 ** (z - 23))

            # 比較は対数空間（スケールの比率差）で行う方が自然
            target_log = math.log(s)
            best_zoom = 16
            best_diff = None
            for z, zscale in scale_table.items():
                diff = abs(math.log(zscale) - target_log)
                if best_diff is None or diff < best_diff:
                    best_diff = diff
                    best_zoom = z

            # clamp 0..30
            return max(0, min(30, int(best_zoom)))
        except (ValueError, TypeError, OverflowError):
            return 16.0

    def _convert_to_wgs84(self, x, y, source_crs_authid):
        """任意座標をWGS84へ変換"""
        try:
            source_crs = QgsCoordinateReferenceSystem(str(source_crs_authid))
            if not source_crs.isValid():
                return None, None
            target_crs = QgsCoordinateReferenceSystem("EPSG:4326")
            transform = QgsCoordinateTransform(source_crs, target_crs, QgsProject.instance())
            point = transform.transform(QgsPointXY(float(x), float(y)))
            return float(point.y()), float(point.x())
        except Exception:
            return None, None

    def find_available_port(self, start_port, end_port):
        """使用可能なポートを探す
        
        Args:
            start_port: 開始ポート番号
            end_port: 終了ポート番号
            
        Returns:
            使用可能なポート番号
        """
        for port in range(start_port, end_port + 1):
            try:
                with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                    s.bind(('localhost', port))
                    return port
            except OSError:
                continue
        raise RuntimeError(f"ポート範囲 {start_port}-{end_port} で使用可能なポートが見つかりません")
    
    def generate_permalink(self):
        """現在の地図ビューからパーマリンクを生成
        
        Returns:
            パーマリンクURL文字列（HTTP形式）
        """
        # 現在のマップキャンバス情報を取得
        canvas = self.iface.mapCanvas()
        extent = canvas.extent()
        crs = canvas.mapSettings().destinationCrs()
        scale = canvas.scale()
        # 回転角度（度）
        rotation = canvas.rotation() if hasattr(canvas, 'rotation') else 0.0
        map_units_per_pixel = canvas.mapUnitsPerPixel()
        center_point = QgsPointXY(
            (extent.xMinimum() + extent.xMaximum()) / 2.0,
            (extent.yMinimum() + extent.yMaximum()) / 2.0,
        )

        # ズームレベルを算出（失敗したらスケールから推定）
        zoom_level = self._calculate_zoom_level(canvas, center_point, crs)
        if zoom_level is None:
            zoom_level = self._estimate_zoom_from_scale(scale)

        # 出力は現在のキャンバスCRSとキャンバス座標をそのまま使用し、標準では scale を含める
        # 例: http://localhost:8089/qgis-map?x=123456.7890&y=4321987.1234&scale=1000.0&crs=EPSG:3857
        x_val = f"{center_point.x():.6f}"
        y_val = f"{center_point.y():.6f}"
        crs_id = crs.authid()  # e.g. 'EPSG:3857' or 'EPSG:4326'
        # scale はキャンバスの scale() を使う
        scale_val = float(scale) if scale is not None else None
        if scale_val is None:
            # 万が一 scale が取得できなければ、ズームレベルから推定して scale を算出（逆算は簡易）
            # ここでは推定値として 1000 を入れておく
            scale_val = 1000.0
        permalink_url = (
            f"http://localhost:{self.server_port}/qgis-map?x={x_val}&y={y_val}"
            f"&scale={scale_val:.1f}&crs={crs_id}&rotation={rotation:.2f}"
        )
        return permalink_url

    def navigate_to_permalink(self, permalink_url):
        """パーマリンクURLから地図ビューに移動
        
        Args:
            permalink_url: パーマリンクURL
        """
        try:
            # HTTP形式のURLを処理
            if permalink_url.startswith('http://localhost:') and '/qgis-map' in permalink_url:
                # HTTP URLから直接実行（ブラウザを経由しない）
                parsed_url = urllib.parse.urlparse(permalink_url)
                params = urllib.parse.parse_qs(parsed_url.query)

                # パラメータをナビゲーションデータへ変換して処理（location または coordinates をサポート）
                try:
                    navigation_data = self._build_navigation_data_from_params(params)
                except ValueError as e:
                    raise

                if navigation_data.get('type') == 'location':
                    # エンコード済み location JSON を処理
                    self.navigate_from_http(navigation_data['location'])
                elif navigation_data.get('type') == 'coordinates':
                    x = navigation_data.get('x')
                    y = navigation_data.get('y')
                    zoom = navigation_data.get('zoom')
                    scale = navigation_data.get('scale')
                    crs = navigation_data.get('crs')
                    rotation = navigation_data.get('rotation')
                    # 直接移動を実行（scale を優先）
                    self.navigate_to_coordinates(x, y, scale, zoom, crs, rotation)
                else:
                    raise ValueError("HTTP URLのパラメータからナビゲーションデータを生成できませんでした。")
                    
            # 従来のカスタムプロトコル形式も維持
            elif permalink_url.startswith('qgis-permalink://'):
                encoded_data = permalink_url[17:]  # "qgis-permalink://"を除去
                json_data = urllib.parse.unquote(encoded_data)
                permalink_data = json.loads(json_data)
                
                # 座標系とextentを復元
                crs = QgsCoordinateReferenceSystem(permalink_data['crs'])
                extent = QgsRectangle(
                    permalink_data['x_min'],
                    permalink_data['y_min'],
                    permalink_data['x_max'],
                    permalink_data['y_max']
                )
                
                # マップキャンバスに適用
                canvas = self.iface.mapCanvas()
                canvas.setDestinationCrs(crs)
                canvas.setExtent(extent)
                canvas.refresh()
                
                self.iface.messageBar().pushMessage(
                    "QMap Permalink", 
                    "パーマリンクから地図ビューに移動しました。", 
                    duration=3
                )
                
            else:
                raise ValueError("サポートされていないパーマリンクURL形式です。")
                
        except Exception as e:
            QMessageBox.warning(
                self.iface.mainWindow(),
                "QMap Permalink エラー",
                f"パーマリンクの処理中にエラーが発生しました：\n{str(e)}"
            )
    
    def navigate_from_http(self, location_data):
        """HTTP経由でのナビゲーション処理
        
        Args:
            location_data: エンコードされた位置データ
        """
        try:
            # URLデコードしてJSONパース
            json_data = urllib.parse.unquote(location_data)
            permalink_data = json.loads(json_data)
            
            # 座標系とextentを復元
            crs = QgsCoordinateReferenceSystem(permalink_data['crs'])
            extent = QgsRectangle(
                permalink_data['x_min'],
                permalink_data['y_min'],
                permalink_data['x_max'],
                permalink_data['y_max']
            )
            
            # マップキャンバスに適用
            canvas = self.iface.mapCanvas()
            canvas.setDestinationCrs(crs)
            canvas.setExtent(extent)
            canvas.refresh()
            
            self.iface.messageBar().pushMessage(
                "QMap Permalink", 
                "HTTP経由で地図ビューに移動しました。", 
                duration=3
            )
            
        except Exception as e:
            raise Exception(f"HTTP地図移動の処理中にエラーが発生しました: {str(e)}")
    
    def navigate_to_coordinates(self, x, y, scale, zoom, crs_auth_id, rotation=None):
        """座標指定でのナビゲーション処理
        
        Args:
            x: 経度またはX座標
            y: 緯度またはY座標  
            zoom: ズームレベル
            crs_auth_id: 座標系ID (例: "EPSG:4326")
        """
        try:
            # 座標系を設定
            crs = QgsCoordinateReferenceSystem(crs_auth_id)

            # scale があればそれを優先して、QGIS のキャンバス API に scale をそのまま適用する
            # ここでは明示的なスケール変換は行わず、canvas.zoomScale を使ってシンプルに反映する
            scale_val = None
            if scale is not None:
                try:
                    scale_val = float(scale)
                except Exception:
                    scale_val = None

            # scale が無ければ zoom から簡易推定する（従来の互換用）
            if scale_val is None and zoom is not None:
                try:
                    zoom_val = float(zoom)
                    scale_val = 1000.0 / (2 ** (zoom_val - 10))
                except Exception:
                    scale_val = None

            # 最終フォールバック
            if scale_val is None:
                scale_val = 1000.0

            # マップキャンバスに適用
            canvas = self.iface.mapCanvas()
            canvas.setDestinationCrs(crs)

            try:
                # 中心点を設定してからスケールを適用する（QGIS 側で正しい表示範囲が計算される）
                canvas.setCenter(QgsPointXY(float(x), float(y)))
                canvas.zoomScale(float(scale_val))
                # 回転が指定されていれば適用
                if rotation is not None:
                    try:
                        canvas.setRotation(float(rotation))
                    except Exception:
                        pass
            except Exception:
                # 万が一 canvas の API が使えない/失敗した場合は従来の範囲設定にフォールバック
                half_width = float(scale_val) / 2.0
                half_height = float(scale_val) / 2.0
                extent = QgsRectangle(
                    float(x) - half_width,
                    float(y) - half_height,
                    float(x) + half_width,
                    float(y) + half_height
                )
                canvas.setExtent(extent)

            canvas.refresh()
            
            self.iface.messageBar().pushMessage(
                "QMap Permalink", 
                f"座標 ({x:.6f}, {y:.6f}) に移動しました。", 
                duration=3
            )
            
        except Exception as e:
            raise Exception(f"座標移動の処理中にエラーが発生しました: {str(e)}")

    def run(self):
        """プラグインのメイン実行処理"""
        # ダイアログが存在しない場合は作成
        if self.dlg is None:
            self.dlg = QMapPermalinkDialog()
            
        # ダイアログのボタンにイベントを接続
        self.dlg.pushButton_generate.clicked.connect(self.on_generate_clicked)
        self.dlg.pushButton_navigate.clicked.connect(self.on_navigate_clicked)
        self.dlg.pushButton_copy.clicked.connect(self.on_copy_clicked)

        # HTTPサーバーの状態を更新
        server_running = self.http_server is not None
        self.dlg.update_server_status(self.server_port, server_running)

        # ダイアログを表示
        self.dlg.show()
        result = self.dlg.exec_()

    def on_generate_clicked(self):
        """パーマリンク生成ボタンがクリックされた時の処理"""
        try:
            permalink = self.generate_permalink()
            self.dlg.lineEdit_permalink.setText(permalink)
            self.iface.messageBar().pushMessage(
                "QMap Permalink", 
                "パーマリンクを生成しました。", 
                duration=3
            )
        except Exception as e:
            QMessageBox.warning(
                self.iface.mainWindow(),
                "QMap Permalink エラー",
                f"パーマリンク生成中にエラーが発生しました：\n{str(e)}"
            )

    def handle_navigation_request(self, navigation_data):
        """HTTPリクエストからのナビゲーション要求を安全に処理（メインスレッドで実行）
        
        Args:
            navigation_data: ナビゲーション情報を含む辞書
        """
        try:
            if navigation_data['type'] == 'location':
                # JSON形式のlocationデータを処理
                location_data = navigation_data['location']
                self.navigate_from_http(location_data)
            elif navigation_data['type'] == 'coordinates':
                # 個別座標パラメータを処理
                x = navigation_data['x']
                y = navigation_data['y']
                zoom = navigation_data.get('zoom')
                scale = navigation_data.get('scale')
                crs = navigation_data['crs']
                rotation = navigation_data.get('rotation')
                # scale を優先して渡す（None の場合は zoom を使う）
                self.navigate_to_coordinates(x, y, scale, zoom, crs, rotation)
                
            print(f"ナビゲーション完了: {navigation_data['type']}")
            
        except Exception as e:
            print(f"ナビゲーション処理エラー: {e}")
            self.iface.messageBar().pushMessage(
                "QMap Permalink エラー", 
                f"ナビゲーション処理中にエラーが発生しました: {str(e)}", 
                duration=5
            )
    
    def on_navigate_clicked(self):
        """ナビゲートボタンがクリックされた時の処理"""
        permalink_url = self.dlg.lineEdit_permalink.text().strip()
        if not permalink_url:
            QMessageBox.warning(
                self.iface.mainWindow(),
                "QMap Permalink",
                "パーマリンクURLを入力してください。"
            )
            return
            
        self.navigate_to_permalink(permalink_url)

    def on_copy_clicked(self):
        """コピーボタンがクリックされた時の処理"""
        permalink_url = self.dlg.lineEdit_permalink.text().strip()
        if not permalink_url:
            QMessageBox.warning(
                self.iface.mainWindow(),
                "QMap Permalink",
                "コピーするパーマリンクがありません。"
            )
            return
            
        clipboard = QApplication.clipboard()
        success = False

        for _ in range(3):
            clipboard.setText(permalink_url, mode=QClipboard.Clipboard)
            QApplication.processEvents()
            if clipboard.text(mode=QClipboard.Clipboard) == permalink_url:
                if clipboard.supportsSelection():
                    clipboard.setText(permalink_url, mode=QClipboard.Selection)
                success = True
                break
            QThread.msleep(50)

        if success:
            self.iface.messageBar().pushMessage(
                "QMap Permalink",
                "パーマリンクをクリップボードにコピーしました。",
                duration=3
            )
        else:
            QMessageBox.warning(
                self.iface.mainWindow(),
                "QMap Permalink",
                "クリップボードへのコピーに失敗しました。再試行するか手動でコピーしてください。"
            )